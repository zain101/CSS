package com.ciphers;

import java.math.BigInteger;
import java.util.Random;

public class RSA {
	
	public static BigInteger calculateExponent(Integer base, BigInteger radix, BigInteger n){
		String str1 = null;
		char str[] = null;
		int count=0;
		str1 =  radix.toString(2);
		str = str1.toCharArray();
		BigInteger z = new BigInteger("1");

		System.out.println("Binary of "+ radix);
		for(char c : str)
			System.out.print(c);
		//System.out.println("\nbase "+ base);
		BigInteger y = new BigInteger(base.toString());
		for(int i =str.length-1; i >=0 ; i--){
		//	System.out.print(">"+str[i]);
			if(str[i] == '1')
				z = z.multiply(y);
				z = z.remainder(n);
				
			y = y.multiply(y);
			y= y.remainder(n);
			count++;
		}
		System.out.println("\nCount: "+ count);
		//System.out.println("Returning: "+ z);
		return z;
	}
	public static void main(String args[]){
		String msg = "Z";
		BigInteger b = new BigInteger(msg.getBytes());
		Integer zz= 0;
		System.out.println(b);
		byte[] byteArr = b.toByteArray();
		for(byte z : byteArr){
			 zz = (int)z;
			System.out.println(z+" "+(char)z + "  ");
		}
		
		//Genrate two lage random primes using Miller-Rabin algo
		Random rnd = new Random();
		rnd.setSeed(1212);
		BigInteger p = BigInteger.probablePrime(1024, rnd); 
		BigInteger q = BigInteger.probablePrime(1024, rnd); 		
		BigInteger n = p.multiply(q);
		BigInteger totientOfn = p.subtract(new BigInteger("1")).multiply(q.subtract(new BigInteger("1")));
		BigInteger e = new BigInteger("35537");
		BigInteger cipher, plain, t;
		System.out.println("p: "+p);
		System.out.println("q: "+q);
		System.out.println("n: "+n);
		System.out.println("totient: "+totientOfn);
		System.out.println("e: "+e);
		
		System.out.println("Automated inverse: "+ e.modInverse(totientOfn));
		
		int a[] = ExtendedEuclidean.extendedEuclideanI(e, new BigInteger(totientOfn.toString()) );
		System.out.println("Extented Euclidean inverse: "+ a[0]+" "+a[1]+" "+ a[2]);

		zz=88;
		cipher = calculateExponent(zz.intValue(),e, n.intValue()).remainder(n); //.remainder(new BigInteger(n.toString()));
		System.out.println();
		System.out.println("cipher "+cipher);
		
		Integer tmp = a[1];
		t = new BigInteger(tmp.toString());
		t = t.mod(totientOfn);
		System.out.println("INVERSE: "+t);
		t = BigInteger.ONE;
		//cipher.modPow( e.modInverse(totientOfn), n);
		t = e.modInverse(totientOfn);
		
		plain = calculateExponent(cipher.intValue(), t, n.intValue()).remainder(n); //.remainder(new BigInteger(n.toString()));
		System.out.println();	
		//cipher.modPow(t, n);
		System.out.println("plain "+plain);
		
		/*cipher  = calculateExponent("1213743762271", "43914225");
		System.out.println("\nEXpo: "+ cipher.mod(n));*/
		
	}
}
